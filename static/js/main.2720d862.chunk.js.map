{"version":3,"sources":["components/Draggable.tsx","core/AppContext.tsx","components/DraggableContainer.tsx","components/DraggableHook.tsx","components/Output.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Draggable","props","className","draggable","onDrag","onDragEnd","onDragLeave","onDragOver","onDrop","onDragStart","data-position","index","children","AppContext","React","createContext","Object","create","ContextWrapper","useState","store","json","logCount","actions","printJson","data","temp","state","setState","Provider","value","DraggableContainer","dragNDrop","setDragNDrop","items","itemList","setItemList","appContext","useContext","print","event","preventDefault","updatedOrder","currentTarget","textContent","draggedFrom","draggedTo","isDragging","e","dragOver","newList","originalOrder","Number","dataset","position","itemDragged","remainingItems","filter","item","slice","dragStart","initialPosition","dataTransfer","setData","useDraggable","map","title","Output","textAreaEl","useRef","useEffect","current","scrollTop","scrollHeight","moveTop","ref","placeholder","defaultValue","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2720d862.chunk.js","sourcesContent":["\r\nimport { FC } from \"react\";\r\n\r\ninterface DraggableProps {\r\n    onDrag(event: React.DragEvent<HTMLElement>): any;\r\n    onDragStart(event: React.DragEvent<HTMLElement>): any;\r\n    onDragEnd(event: React.DragEvent<HTMLElement>): any;\r\n    onDragOver(event: React.DragEvent<HTMLElement>): any;\r\n    onDragLeave(event: React.DragEvent<HTMLElement>): any;\r\n    onDrop(event: React.DragEvent<HTMLElement>): any;\r\n    index: number;\r\n    className: string;\r\n}\r\nexport const Draggable: FC<DraggableProps> = (props) => {\r\n    return (\r\n        <li className={props.className + \" p-4 text-center border w-full hover:bg-gray-200\"}\r\n            draggable onDrag={props.onDrag}\r\n            onDragEnd={props.onDragEnd}\r\n            onDragLeave={props.onDragLeave}\r\n            onDragOver={props.onDragOver}\r\n            onDrop={props.onDrop}\r\n            onDragStart={props.onDragStart}\r\n            data-position={props.index}>\r\n\r\n            {props.children}\r\n        </li>\r\n    );\r\n}","import React, { useState } from \"react\";\r\n\r\ninterface AppContextType {\r\n    store: {\r\n        json: string;\r\n        logCount: number;\r\n    },\r\n    actions: {\r\n        printJson: (data: any) => void\r\n    }\r\n}\r\n\r\nexport const AppContext = React.createContext<AppContextType>(Object.create(null));\r\n\r\nexport const ContextWrapper: React.FC = ({ children }) => {\r\n\r\n    const [state, setState] = useState<AppContextType>(\r\n        {\r\n            store: {\r\n                json: '',\r\n                logCount: 0\r\n            },\r\n            actions: {\r\n                printJson: (data) => {\r\n                    let temp = { ...state }\r\n                    temp.store.json += \"\\n\" + data;\r\n                    temp.store.logCount++;\r\n                    setState(temp)\r\n                }\r\n            }\r\n        })\r\n\r\n    return (\r\n        <AppContext.Provider value={state}>\r\n            {children}\r\n        </AppContext.Provider>\r\n    );\r\n\r\n}","import { Draggable } from \"./Draggable\";\r\nimport { useDraggable } from \"./DraggableHook\";\r\n\r\n\r\nexport const DraggableContainer = () => {\r\n    const { onDrop, onDragLeave, dragOver, dragStart, itemList, dragNDrop } = useDraggable();\r\n    return (\r\n\r\n        <div className=\"bg-blue-300\">\r\n            <ul className=\"p-2\">\r\n                {itemList.map((item: any, index: number) => {\r\n                    return (\r\n                        <Draggable key={index}\r\n                            className={dragNDrop && dragNDrop?.draggedTo === index ? 'bg-blue-400 text-white' : ''}\r\n                            onDrag={event => event}//console.log(\"OnDrag Event => \", event)\r\n                            index={index}\r\n                            onDragEnd={event => event}//console.log(\"OnDragEnd Event => \", event)\r\n                            onDragLeave={onDragLeave}//console.log(\"OnDragLeave Event => \", event)\r\n                            onDragOver={dragOver}//console.log(\"OnDragOver Event => \", event) }\r\n                            onDragStart={dragStart}//console.log(\"OnDragStart Event => \", event)\r\n                            onDrop={onDrop}//console.log(\"OnDrop Event => \", event) }\r\n                        >\r\n\r\n                            {item.title}\r\n                        </Draggable>\r\n                    )\r\n                })}\r\n            </ul>\r\n        </div>\r\n    );\r\n}","import { useContext, useState } from \"react\";\r\nimport data from '../config/data.json';\r\nimport { AppContext } from \"../core/AppContext\";\r\n\r\nexport interface DnDState {\r\n    draggedFrom?: any,\r\n    draggedTo?: any,\r\n    isDragging?: boolean,\r\n    originalOrder?: any,\r\n    updatedOrder?: any\r\n}\r\n\r\n// const items = [\r\n//     { number: \"1\", title: \"Ali Hadi Öztürk\" },\r\n//     { number: \"2\", title: \"Programmer\" },\r\n//     { number: \"3\", title: \"Everthing can be done\" },\r\n//     { number: \"4\", title: \"VS Code\" },\r\n//     { number: \"5\", title: \"Work hard\" },\r\n// ]\r\nexport const useDraggable = (props?: any) => {\r\n    const [dragNDrop, setDragNDrop] = useState<DnDState>();\r\n    const [itemList, setItemList] = useState(data.items);\r\n    const appContext = useContext(AppContext);\r\n\r\n\r\n    const print = (value: string) => {\r\n        appContext.actions.printJson(value)\r\n    }\r\n\r\n    const dragStart = (e: React.DragEvent<HTMLElement>) => {\r\n        //e.preventDefault();\r\n\r\n        const initialPosition = Number(e.currentTarget.dataset.position);\r\n        appContext.actions.printJson(\"Dragging item : \" + e.currentTarget.textContent)\r\n        setDragNDrop({\r\n            ...dragNDrop,\r\n            draggedFrom: initialPosition,\r\n            isDragging: true,\r\n            originalOrder: itemList\r\n        })\r\n\r\n\r\n        //i'm using firefox, this made me lose too much time ^_^\r\n        e.dataTransfer.setData(\"text/html\", '');\r\n    }\r\n\r\n    const dragOver = (e: React.DragEvent<HTMLElement>) => {\r\n\r\n        e.preventDefault();\r\n        let newList = dragNDrop?.originalOrder;\r\n        const draggedFrom = dragNDrop?.draggedFrom;\r\n\r\n        const draggedTo = Number(e.currentTarget.dataset.position);\r\n        if (draggedFrom === draggedTo)\r\n            return;\r\n\r\n        print(\"DragOver to item  : \" + e.currentTarget.textContent)\r\n        const itemDragged = newList[draggedFrom];\r\n        // debugger;\r\n        const remainingItems = newList.filter((item: any, index: number) => index !== draggedFrom);\r\n\r\n        newList = [\r\n            ...remainingItems.slice(0, draggedTo),\r\n            itemDragged,\r\n            ...remainingItems.slice(draggedTo)\r\n        ];\r\n\r\n        if (draggedTo !== dragNDrop?.draggedTo) {\r\n            setDragNDrop({\r\n                ...dragNDrop,\r\n                updatedOrder: newList,\r\n                draggedTo: draggedTo\r\n            })\r\n        }\r\n    }\r\n\r\n    const onDrop = (event: React.DragEvent<HTMLElement>) => {\r\n\r\n        event.preventDefault();\r\n        setItemList(dragNDrop?.updatedOrder);\r\n        print(\"Dropped to item  : \" + event.currentTarget.textContent)\r\n        setDragNDrop({\r\n            ...dragNDrop,\r\n            draggedFrom: null,\r\n            draggedTo: null,\r\n            isDragging: false\r\n        });\r\n    }\r\n\r\n    const onDragLeave = (e: React.DragEvent<HTMLElement>) => {\r\n        print(\"Drag leaved\")\r\n        setDragNDrop({\r\n            ...dragNDrop,\r\n            draggedTo: null\r\n        });\r\n\r\n    }\r\n\r\n    return { onDrop, onDragLeave, dragOver, dragStart, itemList, dragNDrop }\r\n}","import { useContext, useEffect, useRef } from \"react\";\r\nimport { AppContext } from \"../core/AppContext\";\r\n\r\nexport const Output = () => {\r\n    const appContext = useContext(AppContext);\r\n    const textAreaEl = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const moveTop = () => {\r\n        textAreaEl.current!.scrollTop = textAreaEl.current?.scrollHeight!;\r\n    }\r\n\r\n    useEffect(() => {\r\n        moveTop();\r\n    })\r\n\r\n\r\n    return (\r\n        <div className=\"w-3/6 h-3/6 p-4\">\r\n            <p>Log Count : {appContext.store?.logCount}</p>\r\n            <textarea ref={textAreaEl} className=\"w-full h-full border\" placeholder=\"Realtime JSON Print\" defaultValue={appContext.store?.json}>\r\n\r\n            </textarea>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport './App.css';\nimport { DraggableContainer } from './components/DraggableContainer';\nimport { Output } from './components/Output';\nimport { ContextWrapper } from './core/AppContext';\n\n\nfunction App() {\n  return (\n    <ContextWrapper>\n\n      {/* <div className=\"flex flex-row item-center justify-center mx-auto\">\n        \n      </div> */}\n      <div className=\"flex flex-row items-center justify-center h-screen mx-auto\">\n\n        {/* <div className=\" w-full\"> */}\n        <DraggableContainer></DraggableContainer>\n        <Output></Output>\n        {/* </div> */}\n      </div>\n    </ContextWrapper>\n    // <Draggable></DraggableContainer>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}